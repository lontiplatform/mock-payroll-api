{
    "input": [
        {
            "name": "deduction",
            "type": "model",
            "reference": "io.toro.mock.payroll.model.deduction.Deduction"
        }
    ],
    "output": [
        {
            "name": "response",
            "type": "model",
            "reference": "io.toro.mock.payroll.model.APIResponse",
            "gloopProperties": [
                {
                    "name": "deduction",
                    "type": "model",
                    "reference": "io.toro.mock.payroll.model.deduction.Deduction",
                    "gloopProperties": [
                        {
                            "name": "id"
                        }
                    ]
                }
            ]
        },
        {
            "name": "responseCode",
            "type": "integer"
        },
        {
            "name": "APIException",
            "type": "model",
            "reference": "io.toro.martini.api.APIException"
        }
    ],
    "steps": [
        {
            "type": "block",
            "blockType": "TRY_CATCH",
            "children": [
                {
                    "comments": "generate a random ID",
                    "lines": [
                        {
                            "type": "set",
                            "expression": "UUID.randomUUID()",
                            "to": [
                                "response",
                                "deduction",
                                "id"
                            ]
                        },
                        {
                            "from": [
                                "deduction",
                                "name"
                            ],
                            "to": [
                                "response",
                                "deduction",
                                "name"
                            ]
                        },
                        {
                            "from": [
                                "deduction",
                                "description"
                            ],
                            "to": [
                                "response",
                                "deduction",
                                "description"
                            ]
                        },
                        {
                            "from": [
                                "deduction",
                                "type"
                            ],
                            "to": [
                                "response",
                                "deduction",
                                "type"
                            ]
                        },
                        {
                            "from": [
                                "deduction",
                                "method"
                            ],
                            "to": [
                                "response",
                                "deduction",
                                "method"
                            ]
                        },
                        {
                            "from": [
                                "deduction",
                                "amount"
                            ],
                            "to": [
                                "response",
                                "deduction",
                                "amount"
                            ]
                        },
                        {
                            "from": [
                                "deduction",
                                "applicableTo"
                            ],
                            "to": [
                                "response",
                                "deduction",
                                "applicableTo"
                            ]
                        },
                        {
                            "from": [
                                "deduction",
                                "enabled"
                            ],
                            "to": [
                                "response",
                                "deduction",
                                "enabled"
                            ]
                        }
                    ]
                },
                {
                    "type": "invokeGloop",
                    "comments": "insert the deduction into the database",
                    "name": "io.toro.mock.payroll.sql.deduction.InsertDeduction",
                    "declare": [
                        {
                            "variables": [
                                {
                                    "name": "created",
                                    "type": "boolean"
                                }
                            ]
                        }
                    ],
                    "inputs": [
                        {
                            "from": [
                                "deduction",
                                "name"
                            ],
                            "to": [
                                "insertDeductionInput",
                                "name"
                            ]
                        },
                        {
                            "from": [
                                "deduction",
                                "description"
                            ],
                            "to": [
                                "insertDeductionInput",
                                "description"
                            ]
                        },
                        {
                            "from": [
                                "deduction",
                                "type"
                            ],
                            "to": [
                                "insertDeductionInput",
                                "type"
                            ]
                        },
                        {
                            "from": [
                                "deduction",
                                "method"
                            ],
                            "to": [
                                "insertDeductionInput",
                                "method"
                            ]
                        },
                        {
                            "from": [
                                "deduction",
                                "applicableTo"
                            ],
                            "to": [
                                "insertDeductionInput",
                                "applicableTo"
                            ]
                        },
                        {
                            "from": [
                                "deduction",
                                "amount"
                            ],
                            "to": [
                                "insertDeductionInput",
                                "amount"
                            ]
                        },
                        {
                            "from": [
                                "deduction",
                                "enabled"
                            ],
                            "to": [
                                "insertDeductionInput",
                                "enabled"
                            ]
                        },
                        {
                            "from": [
                                "response",
                                "deduction",
                                "id"
                            ],
                            "to": [
                                "insertDeductionInput",
                                "id"
                            ]
                        }
                    ],
                    "outputs": [
                        {
                            "type": "set",
                            "expression": "201",
                            "to": [
                                "responseCode"
                            ]
                        },
                        {
                            "type": "set",
                            "expression": "SUCCESS",
                            "to": [
                                "response",
                                "result"
                            ]
                        },
                        {
                            "type": "set",
                            "expression": "\"Successfully created deduction with id: ${id}\"",
                            "evaluate": true,
                            "to": [
                                "response",
                                "message"
                            ]
                        },
                        {
                            "type": "set",
                            "expression": "$gloopOutput.updateCount > 0",
                            "evaluate": true,
                            "to": [
                                "created"
                            ]
                        }
                    ]
                },
                {
                    "type": "fork",
                    "expression": "created",
                    "children": [
                        {
                            "label": "false",
                            "lines": [
                                {
                                    "type": "set",
                                    "expression": "ERROR",
                                    "to": [
                                        "APIException",
                                        "result"
                                    ]
                                },
                                {
                                    "type": "set",
                                    "expression": "400",
                                    "to": [
                                        "APIException",
                                        "httpErrorCode"
                                    ]
                                },
                                {
                                    "type": "set",
                                    "expression": "Encountered an error while processing the request. Check the logs for more info.",
                                    "to": [
                                        "APIException",
                                        "message"
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ],
            "catch": [
                {
                    "type": "invokeCode",
                    "comments": "log the exception received",
                    "className": "io.toro.martini.LoggerMethods",
                    "methodName": "error",
                    "parameters": [
                        "java.lang.String",
                        "java.lang.Throwable"
                    ],
                    "inputs": [
                        {
                            "from": [
                                "$gloopException",
                                "gloopStackTrace"
                            ],
                            "to": [
                                "message"
                            ]
                        },
                        {
                            "from": [
                                "$gloopException",
                                "realException"
                            ],
                            "to": [
                                "throwable"
                            ]
                        }
                    ]
                },
                {
                    "comments": "map the appropriate error response",
                    "lines": [
                        {
                            "type": "set",
                            "expression": "500",
                            "evaluate": true,
                            "to": [
                                "responseCode"
                            ]
                        },
                        {
                            "type": "set",
                            "expression": "ERROR",
                            "to": [
                                "response",
                                "result"
                            ]
                        },
                        {
                            "type": "set",
                            "expression": "ERROR",
                            "to": [
                                "APIException",
                                "result"
                            ]
                        },
                        {
                            "type": "set",
                            "expression": "Encountered an exception while processing the request.",
                            "to": [
                                "APIException",
                                "message"
                            ]
                        },
                        {
                            "type": "set",
                            "expression": "500",
                            "to": [
                                "APIException",
                                "httpErrorCode"
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}