{
    "input": [
        {
            "name": "user",
            "type": "model",
            "reference": "io.toro.mock.payroll.model.user.User",
            "gloopProperties": [
                {
                    "name": "hourlyRate",
                    "type": "double"
                }
            ]
        }
    ],
    "output": [
        {
            "name": "response",
            "type": "model",
            "reference": "io.toro.mock.payroll.model.APIResponse",
            "gloopProperties": [
                {
                    "name": "user",
                    "type": "model",
                    "reference": "io.toro.mock.payroll.model.user.User",
                    "gloopProperties": [
                        {
                            "name": "userId"
                        },
                        {
                            "name": "hourlyRate",
                            "type": "double"
                        }
                    ]
                }
            ]
        },
        {
            "name": "responseCode",
            "type": "integer"
        },
        {
            "name": "APIException",
            "type": "model",
            "reference": "io.toro.martini.api.APIException"
        }
    ],
    "steps": [
        {
            "type": "block",
            "blockType": "TRY_CATCH",
            "children": [
                {
                    "comments": "generate a random ID",
                    "lines": [
                        {
                            "from": [
                                "user",
                                "name"
                            ],
                            "to": [
                                "response",
                                "user",
                                "name"
                            ]
                        },
                        {
                            "from": [
                                "user",
                                "hourlyRate"
                            ],
                            "to": [
                                "response",
                                "user",
                                "hourlyRate"
                            ]
                        },
                        {
                            "type": "set",
                            "expression": "UUID.randomUUID()",
                            "evaluate": true,
                            "to": [
                                "response",
                                "user",
                                "userId"
                            ]
                        }
                    ]
                },
                {
                    "type": "invokeGloop",
                    "comments": "insert the user data into the database",
                    "name": "io.toro.mock.payroll.sql.user.InsertUser",
                    "inputs": [
                        {
                            "from": [
                                "user",
                                "name"
                            ],
                            "to": [
                                "insertUserInput",
                                "name"
                            ]
                        },
                        {
                            "from": [
                                "user",
                                "hourlyRate"
                            ],
                            "to": [
                                "insertUserInput",
                                "hourlyRate"
                            ]
                        },
                        {
                            "from": [
                                "response",
                                "user",
                                "userId"
                            ],
                            "to": [
                                "insertUserInput",
                                "userId"
                            ]
                        }
                    ],
                    "outputs": [
                        {
                            "type": "set",
                            "expression": "SUCCESS",
                            "to": [
                                "response",
                                "result"
                            ]
                        },
                        {
                            "type": "set",
                            "expression": "\"Successfully created user with id: ${response?.user?.userId}\"",
                            "evaluate": true,
                            "to": [
                                "response",
                                "message"
                            ]
                        },
                        {
                            "type": "set",
                            "expression": "201",
                            "to": [
                                "responseCode"
                            ]
                        }
                    ]
                }
            ],
            "catch": [
                {
                    "type": "invokeCode",
                    "comments": "log the exception received",
                    "className": "io.toro.martini.LoggerMethods",
                    "methodName": "error",
                    "parameters": [
                        "java.lang.String",
                        "java.lang.Throwable"
                    ],
                    "inputs": [
                        {
                            "from": [
                                "$gloopException",
                                "gloopStackTrace"
                            ],
                            "to": [
                                "message"
                            ]
                        },
                        {
                            "from": [
                                "$gloopException",
                                "realException"
                            ],
                            "to": [
                                "throwable"
                            ]
                        }
                    ]
                },
                {
                    "comments": "map the appropriate error response",
                    "lines": [
                        {
                            "type": "set",
                            "expression": "500",
                            "to": [
                                "responseCode"
                            ]
                        },
                        {
                            "type": "set",
                            "expression": "ERROR",
                            "to": [
                                "APIException",
                                "result"
                            ]
                        },
                        {
                            "type": "set",
                            "expression": "500",
                            "to": [
                                "APIException",
                                "httpErrorCode"
                            ]
                        },
                        {
                            "type": "set",
                            "expression": "Encountered an exception while processing the request.",
                            "to": [
                                "APIException",
                                "message"
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}